#!/usr/bin/env node

/**
 * Automatic Documentation Example Generator
 * 
 * This script automatically generates documentation examples from all TEST_EXAMPLES
 * without requiring manual updates when new test examples are added.
 */

import { readFileSync, writeFileSync } from "fs"
import { join } from "path"
import { runTests, TEST_EXAMPLES } from "../test/docs-fixer.test.js"

const DOCS_FILE = join(import.meta.dirname, "..", "COMPREHENSIVE_FIXERS.md")

/**
 * Generate a human-readable title from a camelCase key
 */
function generateTitle(key) {
  return key
    .replace(/([A-Z])/g, ' $1') // Add space before capital letters
    .replace(/^./, str => str.toUpperCase()) // Capitalize first letter
    .trim()
}

/**
 * Generate documentation sections for all examples
 */
function generateAllExampleSections(examples) {
  // Group examples by category for better organization
  const exampleGroups = {
    list: [],
    navigation: [],
    path: [],
    link: []
  }
  
  // Categorize examples automatically
  for (const [key, example] of Object.entries(examples)) {
    if (key.includes('list')) {
      exampleGroups.list.push({ key, example })
    } else if (key.includes('navigation')) {
      exampleGroups.navigation.push({ key, example })
    } else if (key.includes('path')) {
      exampleGroups.path.push({ key, example })
    } else if (key.includes('link')) {
      exampleGroups.link.push({ key, example })
    } else {
      // Default category for uncategorized examples
      if (!exampleGroups.other) exampleGroups.other = []
      exampleGroups.other.push({ key, example })
    }
  }
  
  // Generate sections for each group
  let allSections = ''
  
  // Process each group
  for (const [groupName, groupExamples] of Object.entries(exampleGroups)) {
    if (groupExamples.length === 0) continue
    
    // Sort examples within group for consistent ordering
    groupExamples.sort((a, b) => a.key.localeCompare(b.key))
    
    groupExamples.forEach(({ key, example }, index) => {
      const title = generateTitle(key)
      const section = `#### Example ${index + 1}: ${title}

**Before**:
\`\`\`markdown
${example.before}
\`\`\`

**After**:
\`\`\`markdown
${example.after}
\`\`\`

**Test Source**: \`test/docs-fixer.test.js\` - "${example.testName}"

**Fixes Applied**: ${example.fixesApplied}

---`

      allSections += `${section}

`
    })
  }
  
  return allSections
}

/**
 * Update the documentation file with all generated examples
 */
function updateDocumentation(examples) {
  const docsContent = readFileSync(DOCS_FILE, 'utf8')
  
  // Generate all example sections automatically
  const allSections = generateAllExampleSections(examples)
  
  // Replace the auto-generated sections with all generated sections
  let updatedContent = docsContent
  
  if (allSections) {
    // Find and replace the entire auto-generated section
    const autoGeneratedRegex = /<!-- AUTO-GENERATED: This section is generated from unit tests -->[\s\S]*?(?=\n## |$)/g
    updatedContent = updatedContent.replace(
      autoGeneratedRegex,
      `<!-- AUTO-GENERATED: This section is generated from unit tests -->

${allSections}`
    )
  }
  
  // Update the last updated timestamp
  const timestamp = new Date().toISOString()
  updatedContent = updatedContent.replace(
    /\*Last updated:.*?\*/,
    `*Last updated: ${timestamp} (Auto-generated from unit tests)*`
  )

  writeFileSync(DOCS_FILE, updatedContent)
}

/**
 * Main function to generate documentation examples
 */
async function generateDocumentationExamples() {
  console.log("üîç Extracting examples from structured test data...")
  
  // Run tests to populate TEST_EXAMPLES registry
  await runTests()
  
  console.log("‚öôÔ∏è  Processing examples automatically...")
  
  // Filter out null examples
  const validExamples = {}
  for (const [key, value] of Object.entries(TEST_EXAMPLES)) {
    if (value !== null && value !== undefined) {
      validExamples[key] = value
    }
  }
  
  console.log("üìù Updating documentation with generated examples...")
  
  // Update documentation with all examples
  updateDocumentation(validExamples)
  
  console.log("‚úÖ Documentation examples updated successfully!")
  console.log(`üìä Generated examples for ${Object.keys(validExamples).length} fixers`)
}

// Run if called directly
if (import.meta.url === `file://${process.argv[1]}`) {
  generateDocumentationExamples().catch(console.error)
}

export { generateDocumentationExamples }
